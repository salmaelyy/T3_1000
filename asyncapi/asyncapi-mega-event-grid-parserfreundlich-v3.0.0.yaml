asyncapi: 3.0.0
info:
  title: Mega Event Grid (Parserfreundlich)
  version: 3.0.0
  description: Maximale AsyncAPI v3.0.0 Test-Datei mit valider Struktur f√ºr deinen Parser

servers:
  kafkaServer:
    host: kafka.example.org
    protocol: kafka
    protocolVersion: "1.0.0"
    description: Main Kafka server
    bindings:
      kafka:
        clientId: mega-client
        groupId: mega-group

channels:
  user/registered:
    publish:
      operationId: sendUserRegisteredA
      message:
        $ref: '#/components/messages/UserRegistered'
    subscribe:
      operationId: receiveUserRegisteredA
      message:
        $ref: '#/components/messages/UserRegistered'

  user/registered/analytics:
    subscribe:
      operationId: receiveUserRegisteredAnalytics
      message:
        $ref: '#/components/messages/UserRegistered'

  order/placed/billing:
    publish:
      operationId: sendOrderPlacedServiceA
      message:
        $ref: '#/components/messages/OrderPlaced'
    subscribe:
      operationId: receiveOrderPlacedBilling
      message:
        $ref: '#/components/messages/OrderPlaced'

  order/placed/logistics:
    publish:
      operationId: sendOrderPlacedServiceB
      message:
        $ref: '#/components/messages/OrderPlaced'
    subscribe:
      operationId: receiveOrderPlacedLogistics
      message:
        $ref: '#/components/messages/OrderPlaced'

  payment/confirmed/a:
    publish:
      operationId: sendPaymentConfirmed
      message:
        $ref: '#/components/messages/PaymentConfirmed'
    subscribe:
      operationId: receivePaymentConfirmedOrderSystem
      message:
        $ref: '#/components/messages/PaymentConfirmed'

  payment/confirmed/b:
    publish:
      operationId: sendPaymentConfirmedDuplicate
      message:
        $ref: '#/components/messages/PaymentConfirmed'
    subscribe:
      operationId: receivePaymentConfirmedAnalytics
      message:
        $ref: '#/components/messages/PaymentConfirmed'

  notification/emailSent:
    publish:
      operationId: sendEmailNotification
      message:
        $ref: '#/components/messages/EmailNotification'

  log/event:
    subscribe:
      operationId: receiveAllEvents
      message:
        $ref: '#/components/messages/GenericEvent'

components:
  messages:
    UserRegistered:
      name: UserRegistered
      contentType: application/json
      payload:
        $ref: '#/components/schemas/User'

    OrderPlaced:
      name: OrderPlaced
      contentType: application/json
      payload:
        $ref: '#/components/schemas/Order'

    PaymentConfirmed:
      name: PaymentConfirmed
      contentType: application/json
      payload:
        $ref: '#/components/schemas/Payment'

    EmailNotification:
      name: EmailNotification
      contentType: application/json
      payload:
        $ref: '#/components/schemas/Notification'

    GenericEvent:
      name: GenericEvent
      contentType: application/json
      payload:
        $ref: '#/components/schemas/GenericEvent'

  schemas:
    User:
      type: object
      required: [id, name, email]
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        signupSource:
          type: string

    Order:
      type: object
      required: [orderId, userId, items]
      properties:
        orderId:
          type: string
        userId:
          type: string
        items:
          type: array
          items:
            type: string
        totalAmount:
          type: number

    Payment:
      type: object
      required: [paymentId, orderId, amount]
      properties:
        paymentId:
          type: string
        orderId:
          type: string
        amount:
          type: number
        method:
          type: string

    Notification:
      type: object
      required: [recipient, type, message]
      properties:
        recipient:
          type: string
        type:
          type: string
        message:
          type: string

    GenericEvent:
      type: object
      required: [source, timestamp]
      properties:
        source:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: object